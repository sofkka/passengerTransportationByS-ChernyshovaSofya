fetch('http://localhost:8080/routes')
    .then(response => response.json())
    .then(data => {
        console.log("–î–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤:", data); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        if (data && Array.isArray(data)) {
            displayRoutes(data);
            displayDeparturePoint(data);
            displayTransports(data);
            displayArrivalPoint(data);
        } else {
            console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º");
        }
    })
    .catch(error => console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:", error));


  function displayTransports(routes) {
    if (!routes || !Array.isArray(routes)) {
        console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏–ª–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º");
        return;
    }

    const transportList = document.getElementById('transport-type');
    while (transportList.options.length > 1) {
        transportList.remove(1);
    }

    const uniqueTransportTypes = new Set();
    routes.forEach(route => {
        uniqueTransportTypes.add(route.transporttype);
    });

    const mixOption = document.createElement('option');
    mixOption.value = '–ú–∏–∫—Å';
    mixOption.textContent = '–ú–∏–∫—Å';
    transportList.appendChild(mixOption);

    uniqueTransportTypes.forEach(transportType => {
        const option = document.createElement('option');
        option.value = transportType;
        option.textContent = transportType;
        transportList.appendChild(option);
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function displayDeparturePoint(routes) {
  const departurePointList = document.getElementById('departure'); // –ù–∞—Ö–æ–¥–∏–º select –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  // –ù–µ —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é (–ø–æ–¥—Å–∫–∞–∑–∫—É)
  while (departurePointList.options.length > 1) {
    departurePointList.remove(1); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
  }

  // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  const uniqueDeparturePoint = new Set();

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ Set
  routes.forEach(route => {
    uniqueDeparturePoint.add(route.departurepoint);
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
  const sortedDeparturePoints = Array.from(uniqueDeparturePoint).sort();

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ select
  sortedDeparturePoints.forEach(departurepoint => {
    const option = document.createElement('option');
    option.value = departurepoint; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ option
    option.textContent = departurepoint; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–∏
    departurePointList.appendChild(option); // –î–æ–±–∞–≤–ª—è–µ–º option –≤ select
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–±—ã—Ç–∏—è
function displayArrivalPoint(routes) {
  const arrivalPointList = document.getElementById('arrival'); // –ù–∞—Ö–æ–¥–∏–º select –¥–ª—è –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–±—ã—Ç–∏—è
  // –ù–µ —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é –æ–ø—Ü–∏—é (–ø–æ–¥—Å–∫–∞–∑–∫—É)
  while (arrivalPointList.options.length > 1) {
    arrivalPointList.remove(1); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏, –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
  }

  // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–±—ã—Ç–∏—è
  const uniqueArrivalPoint = new Set();

  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–±—ã—Ç–∏—è –≤ Set
  routes.forEach(route => {
    uniqueArrivalPoint.add(route.destinationpoint);
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
  const sortedArrivalPoints = Array.from(uniqueArrivalPoint).sort();

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç –ø—Ä–∏–±—ã—Ç–∏—è –≤ select
  sortedArrivalPoints.forEach(destinationpoint => {
    const option = document.createElement('option');
    option.value = destinationpoint; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ option
    option.textContent = destinationpoint; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–∏
    arrivalPointList.appendChild(option); // –î–æ–±–∞–≤–ª—è–µ–º option –≤ select
  });
}


// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏
function getTimeInRoute(departuretime, arrivaltime) {
  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const timeDifference = arrivaltime - departuretime;

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
  const hours = Math.floor(timeDifference / (1000 * 60 * 60)); // –ß–∞—Å—ã
  const minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60)); // –ú–∏–Ω—É—Ç—ã

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X —á Y –º–∏–Ω"
  return `${hours} —á ${minutes} –º–∏–Ω`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–∞—Ç
document.getElementById("checkbox-departure-date-interval").addEventListener("click", function () {
  changeDepartureDateInterval();
});

function changeDepartureDateInterval() {
  if (document.getElementById("checkbox-departure-date-interval").checked) {
      document.getElementById("departure-date").style.display = 'none';
      document.getElementById("departure-date").value = null;
      document.getElementById("departure-date-interval").style.display = 'grid';
  } else {
      document.getElementById("departure-date").style.display = 'block';
      document.getElementById("departure-date-interval").style.display = 'none';
      document.getElementById("departure-date-start").value = null;
      document.getElementById("departure-date-end").value = null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
document.getElementById("button-search").addEventListener("click", function () {
  clickButtonSearch();
});


function clickButtonSearch() {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
  const departure = document.getElementById("departure");
  const arrival = document.getElementById("arrival");
  const transportType = document.getElementById("transport-type");
  const departureDate = document.getElementById("departure-date");
  const departureDateStart = document.getElementById("departure-date-start");
  const departureDateEnd = document.getElementById("departure-date-end");

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
  if (!departure || !arrival || !transportType) {
    window.alert("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!departure.value || !arrival.value || !transportType.value) {
    window.alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!");
    return;
  }

  if (!departureDate.value && !departureDateStart.value && !departureDateEnd.value) {
    window.alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç!");
    return;
  }

  if (departure.value === arrival.value) {
    window.alert("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤ –ø—É–Ω–∫—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥!");
    return;
  }

  // –°–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  const params = new URLSearchParams({
    departurepoint: departure.value,
    destinationpoint: arrival.value,
    transporttype: transportType.value === "–ú–∏–∫—Å" ? "" : transportType.value,
    startDate: departureDate.value || "",
    dateOne: departureDateStart.value || "",
    dateTwo: departureDateEnd.value || "",
  });

  console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", params.toString()); // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  fetch(`http://localhost:8080/filteredRoutes?${params.toString()}`)
    .then(response => {
      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞');
      }
    })
    .then(data => {
      console.log("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      if (data.length === 0) {
        // –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        document.querySelector('.routes-list').innerHTML = `
          <div class="no-routes-message">
            <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤. üòî</p>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.</p>
          </div>
        `;
      } else {
        displayRoutes(data); // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
      }
    })
    .catch(error => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      // –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –±–ª–æ–∫–µ —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
      document.querySelector('.routes-list').innerHTML = `
        <div class="error-message">
          <p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ—Ç :( </p>
        </div>
      `;
    });
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
function displayRoutes(routes) {
  const routesList = document.querySelector('.routes-list');
  routesList.innerHTML = '';

  routes.forEach(route => {
      const routeContainer = document.createElement('div');
      routeContainer.className = 'route-container';

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
      let transportIcon = '';
      if (route.transporttype.toLowerCase().includes('—Å–∞–º–æ–ª–µ—Ç')) {
          transportIcon = 'plane.png';
      } else if (route.transporttype.toLowerCase().includes('–ø–æ–µ–∑–¥')) {
          transportIcon = 'train.png';
      } else if (route.transporttype.toLowerCase().includes('–∞–≤—Ç–æ–±—É—Å')) {
          transportIcon = 'bus.png';
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ–±—ä–µ–∫—Ç—ã Date
      const departureTime = new Date(route.departuretime);
      const arrivalTime = new Date(route.arrivaltime);
      const timeInRoute = getTimeInRoute(departureTime, arrivalTime);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
      routeContainer.innerHTML = `
          <div class="card" data-route-id="${route.idRoute}">
              <div class="card-header">
                  <img src="images/${transportIcon}" alt="${route.transporttype}" class="transport-icon">
                  <h3>${route.transporttype}</h3>
              </div>

              <div class="points">
                  <div class="departure-destination">
                      <h2>${route.departurepoint}</h2>
                      <br>
                      <h>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: <br>${route.departuretime}</h>
                  </div>
                  
                  <div class="time-in-route-arrow">
                      <h2 class="time-in-route">${timeInRoute}</h2>
                      <svg class="arrow" width="197" height="30" viewBox="0 0 197 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M39.5 21.5L39.1467 23.4685L39.252 23.4874L39.3588 23.495L39.5 21.5ZM96 25.5L95.8588 27.495L96.0084 27.5056L96.1579 27.4938L96 25.5ZM146.5 21.5L146.658 23.4938L146.754 23.4862L146.849 23.4694L146.5 21.5ZM196.139 14.1458C196.772 13.2406 196.551 11.9936 195.646 11.3607L180.894 1.04722C179.988 0.414335 178.741 0.635148 178.108 1.54042C177.476 2.4457 177.696 3.69263 178.602 4.32552L191.715 13.4931L182.547 26.6063C181.914 27.5116 182.135 28.7585 183.04 29.3914C183.946 30.0243 185.193 29.8034 185.826 28.8982L196.139 14.1458ZM0.146653 16.4686L15.381 19.2029L16.0877 15.2658L0.853306 12.5315L0.146653 16.4686ZM23.9123 20.7342L39.1467 23.4685L39.8533 19.5315L24.6189 16.7971L23.9123 20.7342ZM39.3588 23.495L50.3939 24.2763L50.6764 20.2862L39.6412 19.505L39.3588 23.495ZM56.5736 24.7138L78.6439 26.2763L78.9264 22.2862L56.8561 20.7237L56.5736 24.7138ZM84.8236 26.7138L95.8588 27.495L96.1412 23.505L85.1061 22.7237L84.8236 26.7138ZM96.1579 27.4938L106.021 26.7125L105.705 22.725L95.8421 23.5062L96.1579 27.4938ZM111.545 26.275L131.271 24.7125L130.955 20.725L111.229 22.2875L111.545 26.275ZM136.795 24.275L146.658 23.4938L146.342 19.5062L136.479 20.2875L136.795 24.275ZM146.849 23.4694L156.224 21.8092L155.526 17.8705L146.151 19.5306L146.849 23.4694ZM161.474 20.8795L180.224 17.5591L179.526 13.6204L160.776 16.9408L161.474 20.8795ZM185.474 16.6294L194.849 14.9693L194.151 11.0305L184.776 12.6907L185.474 16.6294Z" fill="#44A1B1"/>
                      </svg>
                  </div>
                  
                  <div class="departure-destination">
                      <h2>${route.destinationpoint}</h2>
                      <br>
                      <h>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: <br>${route.arrivaltime}</h>
                  </div>
              </div>
              <div class="card-body">
                  <h><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç:</strong> ${route.availableseats}</h>
                  <button class="button button-book">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</button>
              </div>
          </div>
      `;

      routesList.appendChild(routeContainer);
  });
}


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"
document.addEventListener("click", (event) => {
  if (event.target.classList.contains("button-book")) {
    const routeCard = event.target.closest(".card");
    const idRoute = Number(routeCard.dataset.routeId);

    const routeDetails = {
      idRoute: idRoute,
      departure: routeCard.querySelector(".departure-destination h2").textContent,
      destination: routeCard.querySelector(".departure-destination:last-child h2").textContent,
      transport: routeCard.querySelector(".card-header h3").textContent,
      departureTime: routeCard.querySelector(".departure-destination h").textContent,
      arrivalTime: routeCard.querySelector(".departure-destination:last-child h").textContent,
    };

    document.getElementById("booking-modal").dataset.routeDetails = JSON.stringify(routeDetails);
    document.getElementById("booking-modal").style.display = "block";
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
document.getElementById("confirm-booking").addEventListener("click", () => {
  const routeDetails = JSON.parse(document.getElementById("booking-modal").dataset.routeDetails);

  const name = document.getElementById("input-name").value;
  const surname = document.getElementById("input-surname").value;
  const patronymic = document.getElementById("input-patronymic").value;

  if (!name || !surname || !patronymic) {
    window.alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –§–ò–û!");
    return;
  }

  const fullName = `${surname} ${name} ${patronymic}`;

  if (routeDetails && routeDetails.idRoute) {
    const idRoute = Number(routeDetails.idRoute);

    const url = new URL("http://localhost:8080/bookings/createNewBooking");
    url.searchParams.append("routeId", idRoute);
    url.searchParams.append("passengerName", fullName);
    url.searchParams.append("bookingDate", formatDateForServer(new Date()));


    fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
    })
      .then(response => {
        if (!response.ok) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        console.log("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:", data);
        document.getElementById("booking-modal").style.display = "none";
        window.alert("–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.");
        window.location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      })
      .catch(error => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message || error);
        window.alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      });
  } else {
    console.error("–û—à–∏–±–∫–∞: routeDetails –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç idRoute.");
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç "YYYY-MM-DD HH:MM"
function formatDateForServer(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  return `${year}-${month}-${day} ${hours}:${minutes}`;
}



// –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    var modal = document.getElementById('booking-modal');

    // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç <span>, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    var span = document.getElementsByClassName('close')[0];

    // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ <span> (x), –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    span.onclick = function() {
        modal.style.display = 'none';
    }

    // –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–ª–∏–∫–∞–µ—Ç –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –æ–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    }
